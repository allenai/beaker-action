name: Main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  # Change this to invalidate existing cache.
  CACHE_PREFIX: v0
  PYTHON_PATH: ./

jobs:
  test_action:
    name: Action (${{ matrix.task.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        task:
          - name: account-whoami
            command: account
            args: whoami --format=json | jq '.[0].name'

          - name: workspace-list
            command: workspace
            args: list ai2 --text=petew

    steps:
      - uses: actions/checkout@v3

      - name: Test action
        uses: ./
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          command: ${{ matrix.task.command }}
          args: ${{ matrix.task.args }}

  test_action_with_docker:
    name: Action (image-create)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      IMAGE_NAME: alpine-hello-world
      BEAKER_WORKSPACE: ai2/petew-testing
    steps:
      - uses: actions/checkout@v3

      - name: Determine current commit SHA (pull request)
        if: github.event_name == 'pull_request'
        run: |
          echo "COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Determine current commit SHA (push)
        if: github.event_name != 'pull_request'
        run: |
          echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

      - name: Delete existing commit image
        continue-on-error: true
        uses: ./
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          command: image
          args: delete petew/${{ env.IMAGE_NAME }}-${{ env.COMMIT_SHA }}

      - name: Upload new commit image
        uses: ./
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          command: image
          args: create --workspace ${{ env.BEAKER_WORKSPACE }} --name ${{ env.IMAGE_NAME }}-${{ env.COMMIT_SHA }} ${{ env.IMAGE_NAME }}

      - name: Delete existing image
        continue-on-error: true
        uses: ./
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          command: image
          args: delete petew/${{ env.IMAGE_NAME }}

      - name: Rename new commit image to final image
        uses: ./
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          command: image
          args: rename petew/${{ env.IMAGE_NAME }}-${{ env.COMMIT_SHA }} ${{ env.IMAGE_NAME }}

  checks:
    name: Python ${{ matrix.python }} - ${{ matrix.task.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python: ['3.10']
        task:
          - name: Lint
            run: flake8 .

          - name: Type check
            run: mypy .

          - name: Style
            run: black --check .

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install prerequisites
        run: |
          pip install --upgrade pip setuptools wheel virtualenv

      - name: Set build variables
        shell: bash
        run: |
          # Get the exact Python version to use in the cache key.
          echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV
          echo "RUNNER_ARCH=$(uname -m)" >> $GITHUB_ENV
          # Use week number in cache key so we can refresh the cache weekly.
          echo "WEEK_NUMBER=$(date +%V)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        id: virtualenv-cache
        with:
          path: .venv
          key: ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-

      - name: Setup virtual environment (no cache hit)
        if: steps.virtualenv-cache.outputs.cache-hit != 'true'
        run: |
          test -d .venv || virtualenv -p $(which python) --copies --reset-app-data .venv
          . .venv/bin/activate
          pip install -r dev-requirements.txt

      - name: Show environment info
        run: |
          . .venv/bin/activate
          which python
          python --version
          pip freeze

      - name: ${{ matrix.task.name }}
        run: |
          . .venv/bin/activate
          ${{ matrix.task.run }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test_action, test_action_with_docker, checks]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install requirements
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r dev-requirements.txt

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
